/*
 * Project fw-test
 * Description: Boron + Mate Net interface test firmware.
 * Author: Ian Hartwig
 * Date: 30 Jul 2022
 */

#include "PacketSerial.h"

// hw config
// mate net pins
const pin_t PIN_MATE_RX = RX;
const pin_t PIN_MATE_TX = TX;
const pin_t PIN_MATE_IND = A0;
const unsigned long MATE_BAUD = 9600;
// mag net pins - not used same uart
const pin_t PIN_MAG_RX = D5;
const pin_t PIN_MAG_TX = D4;
const pin_t PIN_MAG_IND = D2;
const pin_t PIN_MAG_EN = D3;
// expansion pins
const pin_t PIN_EXP_ADC1 = A1;
const pin_t PIN_EXP_ADC2 = A2;
const pin_t PIN_EXP_ADC3 = A3;
const pin_t PIN_EXP_ADC4 = A4;
const pin_t PIN_LED = D7;

// sw config
SYSTEM_MODE(SEMI_AUTOMATIC);
SerialLogHandler logHandler;  // default to Serial on debug USB
typedef PacketSerial_<COBS, 0, 256> PacketSerial;
PacketSerial mate_net_packet_serial;
const int packet_buf_len = 1500 * 3;  // borrow from ethernet + overhead
// test packet from prbs_generate.js prbs11
// char test_packet_buf[] = \
//   "\x80\x50\x22\x15\x48\x0d\x07\x23\x75\xd4\x50\xa2\x45\x6a\x18\x4f\x2e\x72\xf7\x25\x76\x15\xc8\x5d\x25\x36\x3d\xd9\x57\x81\x30\xbe\x48\xed\x6b\x18\xef\x6a\x58\x67\x3f\x78\x53\x23\xf5\x84\x72\xb7\x0d\x67\x1f\x6c\x5b\xa6\xa7\x87\x33\x7f\xd0\x12\x0b\x44\xca\xfc\x21\x94\xf8\xe3\x6d\xdb\x56\xc1\xb8\xeb\x68\xd9\x77\x95\x38\x3b\x1a\xee\x2a\xd0\x32\x1f\x4c\x4f\xae\x22\xd5\x30\x3e\x18\xcf\x7e\x50\xe2\x6d\x7b\x12\xeb\x28\xf1\x66\x9f\x9c\x3d\x99\x7f\x90\x3a\x1a\x4e\x6e\xfa\xa2\x05\x42\x09\x45\x8a\x74\x74\xb4\xcc\xff\xe0\x0c\x07\x83\x31\xfe\xc0\xb8\x4b\x2c\xf3\xe7\x8f\x36\x7d\xf1\x46\x8b\x94\xb8\xcb\x7c\xd1\xf2\xc7\x3b\x7a\xd2\x33\x5f\xc4\x1a\x8e\x16\xc9\xbd\xe9\x49\x8d\xf7\x45\x4a\x0c\x47\xab\x20\xf4\x64\xbe\xc8\xbd\x49\x0d\xa7\x67\x5f\x44\x4a\xac\x03\x81\xb0\xee\x6a\xf8\x23\x15\xe8\x49\x2d\xb3\x6f\xda\x16\x49\xed\xcb\x5c\xc5\xfa\x42\x69\x79\x93\xfb\x82\xb1\x0e\xa6\x87\x93\x3b\xfa\x82\x11\x4a\x8c\x17\x89\x35\xbc\x69\xb9\xeb\xc8\x9d\x5d\x05\x22\x35\x5c\x05\x82\x71\x76\x95\x98\x7f\x30\x7e\x30\xde\x74\xf4\xe4\xee\xea\xa8\x00"\
//   "\x80\x50\x22\x15\x48\x0d\x07\x23\x75\xd4\x50\xa2\x45\x6a\x18\x4f\x2e\x72\xf7\x25\x76\x15\xc8\x5d\x25\x36\x3d\xd9\x57\x81\x30\xbe\x48\xed\x6b\x18\xef\x6a\x58\x67\x3f\x78\x53\x23\xf5\x84\x72\xb7\x0d\x67\x1f\x6c\x5b\xa6\xa7\x87\x33\x7f\xd0\x12\x0b\x44\xca\xfc\x21\x94\xf8\xe3\x6d\xdb\x56\xc1\xb8\xeb\x68\xd9\x77\x95\x38\x3b\x1a\xee\x2a\xd0\x32\x1f\x4c\x4f\xae\x22\xd5\x30\x3e\x18\xcf\x7e\x50\xe2\x6d\x7b\x12\xeb\x28\xf1\x66\x9f\x9c\x3d\x99\x7f\x90\x3a\x1a\x4e\x6e\xfa\xa2\x05\x42\x09\x45\x8a\x74\x74\xb4\xcc\xff\xe0\x0c\x07\x83\x31\xfe\xc0\xb8\x4b\x2c\xf3\xe7\x8f\x36\x7d\xf1\x46\x8b\x94\xb8\xcb\x7c\xd1\xf2\xc7\x3b\x7a\xd2\x33\x5f\xc4\x1a\x8e\x16\xc9\xbd\xe9\x49\x8d\xf7\x45\x4a\x0c\x47\xab\x20\xf4\x64\xbe\xc8\xbd\x49\x0d\xa7\x67\x5f\x44\x4a\xac\x03\x81\xb0\xee\x6a\xf8\x23\x15\xe8\x49\x2d\xb3\x6f\xda\x16\x49\xed\xcb\x5c\xc5\xfa\x42\x69\x79\x93\xfb\x82\xb1\x0e\xa6\x87\x93\x3b\xfa\x82\x11\x4a\x8c\x17\x89\x35\xbc\x69\xb9\xeb\xc8\x9d\x5d\x05\x22\x35\x5c\x05\x82\x71\x76\x95\x98\x7f\x30\x7e\x30\xde\x74\xf4\xe4\xee\xea\xa8\x00"\
//   "\x80\x50\x22\x15\x48\x0d\x07\x23\x75\xd4\x50\xa2\x45\x6a\x18\x4f\x2e\x72\xf7\x25\x76\x15\xc8\x5d\x25\x36\x3d\xd9\x57\x81\x30\xbe\x48\xed\x6b\x18\xef\x6a\x58\x67\x3f\x78\x53\x23\xf5\x84\x72\xb7\x0d\x67\x1f\x6c\x5b\xa6\xa7\x87\x33\x7f\xd0\x12\x0b\x44\xca\xfc\x21\x94\xf8\xe3\x6d\xdb\x56\xc1\xb8\xeb\x68\xd9\x77\x95\x38\x3b\x1a\xee\x2a\xd0\x32\x1f\x4c\x4f\xae\x22\xd5\x30\x3e\x18\xcf\x7e\x50\xe2\x6d\x7b\x12\xeb\x28\xf1\x66\x9f\x9c\x3d\x99\x7f\x90\x3a\x1a\x4e\x6e\xfa\xa2\x05\x42\x09\x45\x8a\x74\x74\xb4\xcc\xff\xe0\x0c\x07\x83\x31\xfe\xc0\xb8\x4b\x2c\xf3\xe7\x8f\x36\x7d\xf1\x46\x8b\x94\xb8\xcb\x7c\xd1\xf2\xc7\x3b\x7a\xd2\x33\x5f\xc4\x1a\x8e\x16\xc9\xbd\xe9\x49\x8d\xf7\x45\x4a\x0c\x47\xab\x20\xf4\x64\xbe\xc8\xbd\x49\x0d\xa7\x67\x5f\x44\x4a\xac\x03\x81\xb0\xee\x6a\xf8\x23\x15\xe8\x49\x2d\xb3\x6f\xda\x16\x49\xed\xcb\x5c\xc5\xfa\x42\x69\x79\x93\xfb\x82\xb1\x0e\xa6\x87\x93\x3b\xfa\x82\x11\x4a\x8c\x17\x89\x35\xbc\x69\xb9\xeb\xc8\x9d\x5d\x05\x22\x35\x5c\x05\x82\x71\x76\x95\x98\x7f\x30\x7e\x30\xde\x74\xf4\xe4\xee\xea\xa8\x00"\
//   "\x80\x50\x22\x15\x48\x0d\x07\x23\x75\xd4\x50\xa2\x45\x6a\x18\x4f\x2e\x72\xf7\x25\x76\x15\xc8\x5d\x25\x36\x3d\xd9\x57\x81\x30\xbe\x48\xed\x6b\x18\xef\x6a\x58\x67\x3f\x78\x53\x23\xf5\x84\x72\xb7\x0d\x67\x1f\x6c\x5b\xa6\xa7\x87\x33\x7f\xd0\x12\x0b\x44\xca\xfc\x21\x94\xf8\xe3\x6d\xdb\x56\xc1\xb8\xeb\x68\xd9\x77\x95\x38\x3b\x1a\xee\x2a\xd0\x32\x1f\x4c\x4f\xae\x22\xd5\x30\x3e\x18\xcf\x7e\x50\xe2\x6d\x7b\x12\xeb\x28\xf1\x66\x9f\x9c\x3d\x99\x7f\x90\x3a\x1a\x4e\x6e\xfa\xa2\x05\x42\x09\x45\x8a\x74\x74\xb4\xcc\xff\xe0\x0c\x07\x83\x31\xfe\xc0\xb8\x4b\x2c\xf3\xe7\x8f\x36\x7d\xf1\x46\x8b\x94\xb8\xcb\x7c\xd1\xf2\xc7\x3b\x7a\xd2\x33\x5f\xc4\x1a\x8e\x16\xc9\xbd\xe9\x49\x8d\xf7\x45\x4a\x0c\x47\xab\x20\xf4\x64\xbe\xc8\xbd\x49\x0d\xa7\x67\x5f\x44\x4a\xac\x03\x81\xb0\xee\x6a\xf8\x23\x15\xe8\x49\x2d\xb3\x6f\xda\x16\x49\xed\xcb\x5c\xc5\xfa\x42\x69\x79\x93\xfb\x82\xb1\x0e\xa6\x87\x93\x3b\xfa\x82\x11\x4a\x8c\x17\x89\x35\xbc\x69\xb9\xeb\xc8\x9d\x5d\x05\x22\x35\x5c\x05\x82\x71\x76\x95\x98\x7f\x30\x7e\x30\xde\x74\xf4\xe4\xee\xea\xa8\x00"\
//   "\x80\x50\x22\x15\x48\x0d\x07\x23\x75\xd4\x50\xa2\x45\x6a\x18\x4f\x2e\x72\xf7\x25\x76\x15\xc8\x5d\x25\x36\x3d\xd9\x57\x81\x30\xbe\x48\xed\x6b\x18\xef\x6a\x58\x67\x3f\x78\x53\x23\xf5\x84\x72\xb7\x0d\x67\x1f\x6c\x5b\xa6\xa7\x87\x33\x7f\xd0\x12\x0b\x44\xca\xfc\x21\x94\xf8\xe3\x6d\xdb\x56\xc1\xb8\xeb\x68\xd9\x77\x95\x38\x3b\x1a\xee\x2a\xd0\x32\x1f\x4c\x4f\xae\x22\xd5\x30\x3e\x18\xcf\x7e\x50\xe2\x6d\x7b\x12\xeb\x28\xf1\x66\x9f\x9c\x3d\x99\x7f\x90\x3a\x1a\x4e\x6e\xfa\xa2\x05\x42\x09\x45\x8a\x74\x74\xb4\xcc\xff\xe0\x0c\x07\x83\x31\xfe\xc0\xb8\x4b\x2c\xf3\xe7\x8f\x36\x7d\xf1\x46\x8b\x94\xb8\xcb\x7c\xd1\xf2\xc7\x3b\x7a\xd2\x33\x5f\xc4\x1a\x8e\x16\xc9\xbd\xe9\x49\x8d\xf7\x45\x4a\x0c\x47\xab\x20\xf4\x64\xbe\xc8\xbd\x49\x0d\xa7\x67\x5f\x44\x4a\xac\x03\x81\xb0\xee\x6a\xf8\x23\x15\xe8\x49\x2d\xb3\x6f\xda\x16\x49\xed\xcb\x5c\xc5\xfa\x42\x69\x79\x93\xfb\x82\xb1\x0e\xa6\x87\x93\x3b\xfa\x82\x11\x4a\x8c\x17\x89\x35\xbc\x69\xb9\xeb\xc8\x9d\x5d\x05\x22\x35\x5c\x05\x82\x71\x76\x95\x98\x7f\x30\x7e\x30\xde\x74\xf4\xe4\xee\xea\xa8\x00";
// const int test_packet_len = (256*5)+1;
// test packet from prbs_generate.js prbs7
char test_packet_buf[] = \
  "\x83\x0a\x3c\x8b\x3a\x9f\x43\x89\x36\xb7\xb1\xa5\xdc\xca\xbf\x80"\
  "\x83\x0a\x3c\x8b\x3a\x9f\x43\x89\x36\xb7\xb1\xa5\xdc\xca\xbf\x80"\
  "\x83\x0a\x3c\x8b\x3a\x9f\x43\x89\x36\xb7\xb1\xa5\xdc\xca\xbf\x80"\
  "\x83\x0a\x3c\x8b\x3a\x9f\x43\x89\x36\xb7\xb1\xa5\xdc\xca\xbf\x80";
const int test_packet_len = 65;
// char test_packet_buf[] = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.";
// const int test_packet_len = 57;
// "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eu aliquam quam, ac hendrerit eros. Vivamus vulputate vulputate eleifend. Ut ac blandit risus, sed suscipit felis. Praesent in leo eget massa tincidunt maximus. Integer tincidunt eros lorem, ac accumsan felis feugiat non. Praesent eu risus sed risus vestibulum dictum nec a magna. Donec pulvinar metus non lacus dignissim, id mattis odio iaculis. Donec vulputate, erat id porta sollicitudin, mi lorem vestibulum urna, vel dapibus mi justo tincidunt leo. Nam in sagittis metus,"\
// " ac fringilla urna. Aenean posuere mi urna, in scelerisque tellus fringilla a. Aliquam ac dignissim dolor. Aenean imperdiet eros eget arcu tincidunt accumsan. Maecenas tincidunt odio sit amet lectus sagittis commodo. Aenean rhoncus magna imperdiet pulvinar elementum."\
// "Aliquam consequat euismod lectus et dapibus. Vestibulum auctor est in justo tincidunt, at venenatis tortor placerat. Etiam at lacus non risus convallis ornare. Suspendisse eget euismod ex. Quisque quis purus et sapien interdum aliquet ut et urna. Ut dapibus nunc mollis massa ultricies, non pellentesque ex pretium. Integer sed enim volutpat, venenatis augue at, blandit justo. Maecenas ut ligula quis ex elementum maximus. Fusce hendrerit diam dui. Praesent diam odio, dignissim eget faucibus in, finibus eget enim. Vivamus et vestibulum augue."\
// "Suspendisse efficitur est sit amet urna fermentum vulputate. Aenean at mollis dolor, quis congue arcu. Aliquam ultrices luctus elit, id non.";
// const int test_packet_len = 1499;
// char debug_packet_buf[packet_buf_len];
// int debug_packet_len = 0;
system_tick_t debug_last_out_ms = 0;
int mate_net_tx_pkt = 0;
int mate_net_rx_pkt = 0;
int mate_net_rx_err = 0;


// allocate large buffers for hw serial for packet flinging
HAL_USB_USART_Config acquireUSBSerial1Buffer()
{
  HAL_USB_USART_Config conf = {0};

  // The usable buffer size will be 128
  static uint8_t usbserial1_rx_buffer[packet_buf_len];
  static uint8_t usbserial1_tx_buffer[packet_buf_len];

  conf.rx_buffer = usbserial1_rx_buffer;
  conf.tx_buffer = usbserial1_tx_buffer;
  conf.rx_buffer_size = packet_buf_len;
  conf.tx_buffer_size = packet_buf_len;

  return conf;
}

void mateNetOnPacketReceived(
  const void* sender,
  const uint8_t* buffer,
  size_t size) {
  // check packet size 
  if (size != test_packet_len) {
    mate_net_rx_err++;
    Log.error(String::format("bad len %d", size));
    return;
  }
  // check packet content
  for(int i=0; i<test_packet_len; i++) {
    if(test_packet_buf[i] != buffer[i]) {
      mate_net_rx_err++;
      Log.error(String::format("bad char %d", i));
      return;
    }
  }
  // ok
  // Log.info(String::format("%s (%d)", buffer, size));
  mate_net_rx_pkt++;
}

// setup() runs once, when the device is first turned on.
void setup() {
  // mate net pin setup
  pinMode(PIN_MATE_RX, INPUT);
  pinMode(PIN_MATE_TX, OUTPUT);
  pinMode(PIN_MATE_IND, OUTPUT);
  analogWrite(PIN_MATE_IND, 127, 5);  // 50% 5Hz blink effect
  Serial1.begin(MATE_BAUD, SERIAL_8N1);
  // pinSetDriveStrength does not seem to work with analogWrite and Serial1
  // mag net pin setup
  pinMode(PIN_MAG_RX, INPUT);
  pinMode(PIN_MAG_TX, INPUT);
  pinMode(PIN_MAG_IND, OUTPUT);  // open-drain to vcc
  analogWrite(PIN_MAG_IND, 127, 5);  // 50% 5Hz blink effect
  pinMode(PIN_MAG_EN, INPUT);
  // expansion pins setup
  pinMode(PIN_EXP_ADC1, INPUT);
  pinMode(PIN_EXP_ADC2, INPUT);
  pinMode(PIN_EXP_ADC3, INPUT);
  pinMode(PIN_EXP_ADC4, INPUT);
  // debug
  delay(2000);  // console reconnect
  Log.info(String::format("%s: %s", Time.timeStr().c_str(), "Hello world!"));
  // packet interfaces
  mate_net_packet_serial.setStream(&Serial1);
  mate_net_packet_serial.setPacketHandler(&mateNetOnPacketReceived);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // Serial1.write("this is a test test\r\n");
  // delay(1000);
  // // debug capture of Serial1
  // while(Serial1.available() && debug_packet_len < packet_buf_len) {
  //   debug_packet_buf[debug_packet_len] = Serial1.read();
  //   debug_packet_len++;
  // }
  // Log.info(String::format("debug_packet_buf: %s", debug_packet_buf));
  // delay(1000);
  //
  // packet exchange
  mate_net_packet_serial.update();
  if(mate_net_packet_serial.overflow()) {
    Log.error("mate_net_packet_serial overflow!");
  }
  if(Serial1.availableForWrite()) {
    digitalWrite(PIN_LED, PinState::HIGH);
    mate_net_packet_serial.send((uint8_t *)test_packet_buf, test_packet_len);
    mate_net_tx_pkt++;
    digitalWrite(PIN_LED, PinState::LOW);
  }
  // debug out
  system_tick_t now_ms = millis();
  if(now_ms - debug_last_out_ms >= 5000) {
    Log.info(String::format(
      "mate_net_tx_pkt: %d, mate_net_rx_pkt: %d, mate_net_rx_err: %d",
      mate_net_tx_pkt, mate_net_rx_pkt, mate_net_rx_err
    ));
    debug_last_out_ms = now_ms;
  }
  // cloud out TODO
  // uptime
  // mate net pkt stats
}